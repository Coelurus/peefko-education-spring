openapi: 3.0.3
info:
  title: Java WEB I - SpringBoot and REST API
  description: |-
    This is an educational task number 4.
  version: 1.0.0
tags:
  - name: offer
    description: Everything about Offers
  - name: board
    description: Look through offers and edit them
  - name: user
    description: Manage app users

paths:
  /offer:
    post:
      tags:
        - offer
      summary: Create new offer
      description: Add a new offer
      operationId: addOffer
      requestBody:
        description: Create a new offer
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Offer"
          application/xml:
            schema:
              $ref: "#/components/schemas/Offer"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Offer"
            application/xml:
              schema:
                $ref: "#/components/schemas/Offer"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
    put:
      tags:
        - offer
      summary: Update existing offer
      description: Update an existing offer by Id
      operationId: updateOffer
      requestBody:
        description: Update an existing offer on board
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Offer"
          application/xml:
            schema:
              $ref: "#/components/schemas/Offer"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Offer"
            application/xml:
              schema:
                $ref: "#/components/schemas/Offer"
        "400":
          description: Invalid ID supplied
        "404":
          description: Offer not found
        "422":
          description: Validation exception
    get:
      tags:
        - offer
      summary: Returns offers
      description: Returns a list of offers
      operationId: getOffers
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Offer"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Offer"
  /offer/{offerId}:
    get:
      tags:
        - offer
      summary: Find an offer by id
      description: Returns a single offer
      operationId: getOfferById
      parameters:
        - name: offerId
          in: path
          description: Id of an offer to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Offer"
            application/xml:
              schema:
                $ref: "#/components/schemas/Offer"
        "400":
          description: Invalid ID supplied
        "404":
          description: Offer not found
    delete:
      tags:
        - offer
      summary: Deletes an offer
      description: Deletes an offer by id
      operationId: deleteOffer
      parameters:
        - name: offerId
          in: path
          description: Offer id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid offer id
    post:
      tags:
        - offer
      summary: Updates an offer on the board
      description: Updates an offer with form data
      operationId: updateOfferWithForm
      parameters:
        - name: offerId
          in: path
          description: Id of an offer that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of an offer that needs to be updated
          schema:
            type: string
        - name: cost
          in: query
          description: Cost of an offer that needs to be updated
          schema:
            type: integer
            format: int64
        - name: services
          in: query
          description: Services in an offer that needs to be updated
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Service"
        - name: created
          in: query
          description: Id of worker/team that created this offer
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Offer"
            application/xml:
              schema:
                $ref: "#/components/schemas/Offer"
        "400":
          description: Invalid input
  /order:
    get:
      tags:
        - board
      summary: Get all orders
      operationId: getOrders
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
    post:
      tags:
        - board
      summary: Place an order for an offer
      description: Place a new order for an offer on a board
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
          application/xml:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
  /order/{orderId}:
    get:
      tags:
        - board
      summary: Find purchase order by Id
      description: Find purchase order by Id
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: Id of order to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
        - board
      summary: Delete purchase order
      description: Delete purchase order by order ID
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    post:
      tags:
        - board
      summary: Update order state
      description: Update an existing order with form data
      operationId: updateOrderWithForm
      parameters:
        - name: orderId
          in: path
          description: ID of an order that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: complete
          in: query
          description: State of completition of an order
          schema:
            type: boolean
        - name: payed
          in: query
          description: Payment status of an order
          schema:
            type: boolean
      responses:
        "400":
          description: Invalid input

  /order/my:
    get:
      tags:
        - board
      summary: Get orders of signed in user
      description: Check which user is signed in and return all his orders
      operationId: getMyOrders
      responses:
        "200":
          description: sucessful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"

  /login:
    post:
      tags:
        - user
      summary: Log user into the system
      operationId: loginUser
      requestBody:
        description: Login information
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation

components:
  schemas:
    Service:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        name:
          type: string
          example: Local breach
        description:
          type: string
          example: We locally connect and do wonders.

    Offer:
      required:
        - id
        - name
        - cost
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 43
        name:
          type: string
          example: Security check
        cost:
          type: integer
          format: int64
          example: 30000
        services:
          type: array
          items:
            $ref: "#/components/schemas/Service"
        created:
          $ref: "#/components/schemas/User"
          example: 3

    Order:
      type: object
      required:
        - id
        - offerId
        - complete
        - payed
        - customerId
      properties:
        id:
          type: integer
          format: int64
          example: 10

        offerId:
          $ref: "#/components/schemas/Offer/properties/id"

        customerId:
          $ref: "#/components/schemas/User/properties/id"

        complete:
          type: boolean
          example: false

        payed:
          type: boolean
          example: false

    SupplierTeam:
      type: object
      required:
        - leader
      properties:
        id:
          type: integer
          format: int64
          example: 5
        leader:
          $ref: "#/components/schemas/User"
        members:
          type: array
          items:
            $ref: "#/components/schemas/User"

    User:
      type: object
      required:
        - id
        - userName
        - passwordHash
        - status
      properties:
        id:
          type: integer
          format: int64
          example: 5
        userName:
          type: integer
          format: int64
          example: Carna Llore
        passwordHash:
          type: string
          example: 89q33rh9OAOa39R
        status:
          type: string
          enum: [customer, supplier]
        name:
          type: string
          example: Mardi Mareda
        phone:
          type: string
          example: "734 345 567"
        email:
          type: string
          example: "mardi@seznam.cz"

    LoginRequest:
      description: login information
      required:
        - username
        - password
      properties:
        username:
          description: username of user
          type: string
          example: silent_axe
        password:
          description: password of user
          type: string
          example: Vietnam123

  requestBodies:
    Offer:
      description: Offer object that needs to be added to the board
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Offer"
        application/xml:
          schema:
            $ref: "#/components/schemas/Offer"
